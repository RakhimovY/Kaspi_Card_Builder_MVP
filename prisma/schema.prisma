// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Billing integration
  lemonSqueezyCustomerId String? @unique // External Lemon Squeezy customer ID
  
  // Business logic relations
  subscriptions Subscription[]
  usageStats    UsageStat[]
  productDrafts ProductDraft[]
  imageAssets   ImageAsset[]
  imageProcessingLogs ImageProcessingLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
model Subscription {
  id                String   @id @default(cuid())
  userId            String
  provider          String   // "lemon-squeezy" | "paddle" | "polar"
  providerId        String   // external subscription ID
  plan              String   // "free" | "pro"
  status            String   // "active" | "canceled" | "past_due" | "unpaid"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  customerId        String?  // external customer ID
  metadata          Json?    // provider-specific data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([status, currentPeriodEnd])
}

model UsageStat {
  id              String @id @default(cuid())
  userId          String
  periodYM        String // "2024-01" format
  magicFillCount  Int    @default(0)
  photosProcessed Int    @default(0)
  exportCount     Int    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, periodYM])
  @@index([periodYM])
}

model ProductDraft {
  id          String   @id @default(cuid())
  userId      String
  sku         String
  brand       String?
  type        String?
  model       String?
  keySpec     String?
  titleRU     String?
  titleKZ     String?
  descRU      String?
  descKZ      String?
  category    String?
  attributes  Json?    // flexible attributes object
  status      String   @default("draft") // "draft" | "ready" | "exported"
  gtin        String?  // barcode if available
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  images ImageAsset[]

  @@index([userId, status])
  @@index([gtin])
}

model ImageAsset {
  id          String   @id @default(cuid())
  draftId     String?
  userId      String
  source      String   // "upload" | "web" | "ai" | "composite"
  filename    String
  width       Int
  height      Int
  bytes       Int
  hash        String?  // for deduplication
  licenseNote String?
  metadata    Json?    // EXIF, processing info
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  draft ProductDraft? @relation(fields: [draftId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([hash])
}

model BarcodeLookup {
  id        String   @id @default(cuid())
  gtin      String   @unique
  source    String   // "gs1" | "cache" | "manual"
  brand     String?
  name      String?
  model     String?
  rawJson   Json     // full response from external service
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gtin])
}

model ImageProcessingLog {
  id              String   @id @default(cuid())
  userId          String
  filename        String
  originalSize    Int
  processedSize   Int
  processingTime  Int      // milliseconds
  options         String   // JSON string with processing options
  success         Boolean
  errorMessage    String?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([success])
}
