generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String               @id @default(cuid())
  name                   String?
  email                  String?              @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  lemonSqueezyCustomerId String?              @unique
  accounts               Account[]
  imageAssets            ImageAsset[]
  imageProcessingLogs    ImageProcessingLog[]
  productDrafts          ProductDraft[]
  sessions               Session[]
  subscriptions          Subscription[]
  usageStats             UsageStat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerId         String
  plan               String
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  customerId         String?
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider], name: "userId_provider")
  @@index([status, currentPeriodEnd])
}

model UsageStat {
  id              String   @id @default(cuid())
  userId          String
  periodYM        String
  magicFillCount  Int      @default(0)
  photosProcessed Int      @default(0)
  exportCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, periodYM], name: "userId_periodYM")
  @@index([periodYM])
}

model ProductDraft {
  id           String       @id @default(cuid())
  userId       String
  sku          String
  brand        String?
  type         String?
  model        String?
  keySpec      String?
  titleRU      String?
  titleKZ      String?
  descRU       String?
  descKZ       String?
  category     String?
  attributes   Json?
  variantsJson Json?
  status       String       @default("draft")
  gtin         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  images       ImageAsset[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([gtin])
}

model ImageAsset {
  id          String        @id @default(cuid())
  draftId     String?
  userId      String
  source      String
  filename    String
  width       Int
  height      Int
  bytes       Int
  hash        String?
  licenseNote String?
  metadata    Json?
  createdAt   DateTime      @default(now())
  draft       ProductDraft? @relation(fields: [draftId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hash])
}

model BarcodeLookup {
  id        String   @id @default(cuid())
  gtin      String   @unique
  source    String
  brand     String?
  name      String?
  model     String?
  rawJson   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gtin])
}

model ImageProcessingLog {
  id             String   @id @default(cuid())
  userId         String?
  filename       String
  originalSize   Int
  processedSize  Int
  processingTime Int
  options        String
  success        Boolean
  errorMessage   String?
  createdAt      DateTime @default(now())
  ipAddress      String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([ipAddress, createdAt])
  @@index([success])
}

model IpQuota {
  id              String   @id @default(cuid())
  ipAddress       String
  periodYM        String
  magicFillCount  Int      @default(0)
  photosProcessed Int      @default(0)
  exportCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([ipAddress, periodYM], name: "ipAddress_periodYM")
  @@index([periodYM])
  @@index([ipAddress])
}
